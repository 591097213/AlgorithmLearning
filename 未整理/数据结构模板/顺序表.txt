#include <iostream>
using namespace std;
const int MaxSize=20;  //20只是示例性的数据，可以根据实际问题具体定义
class SeqList
{
public:
	SeqList( ){length=0;}       //无参构造函数，创建一个空表
	SeqList(int a[ ], int n)    //有参构造函数
	{
		for(int i=0; i<n; i++)
			data[i]=a[i];
		length=n;
	}
	~SeqList()   { }             //析构函数为空
	void Insert(int i,int x)
	{
		int j;
		if(length>=MaxSize)
		{
			cout<<"full list"<<endl;
			return;
		}
		if(i<1||i>length+1)
		{
			cout<<"data error"<<endl;
			return;
		}
		for(j=length-1;j>=i-1;j--)
			data[j+1]=data[j];
		data[i-1]=x;
		length++;
	}
	void Delete(int i)
	{
		int j;
		if(length==0 )
		{
			cout<<"empty list"<<endl;
			return;
		}
		if(i<1||i>length)
		{
			cout<<"data error"<<endl;
			return;
		}
		int x=data[i-1];
		for(j=i;j<length;j++)
			data[j-1]=data[j]; 
		length--;
	}
	int Locate(int x)
	{     
		for (int i=0; i<length; i++)
			if (data[i]==x) 
				return i+1 ;  //下标为i的元素等于x，返回其序号i+1
		return 0;  //退出循环，说明查找失败
	}
	void PrintList()       //遍历线性表，按序号依次输出各元素
	{
		for (int i=0; i<length; i++)
			cout<<data[i]<<"  ";
		cout<<endl;
	}
private:
	int data[MaxSize];      //存放数据元素的数组
	int length;            //线性表的长度
};
int main()
{
	int r[5]={1, 2, 3, 4, 5};
	SeqList L(r, 5);
	cout<<"执行插入操作前数据为："<<endl;
	L.PrintList( );              //输出所有元素
	L.Insert(2,3);
	cout<<"执行插入操作后数据为："<<endl;
	L.PrintList( );              //输出所有元素
	cout<<"值为3的元素位置为:";
	cout<<L.Locate(3)<<endl;    //查找元素3，并返回在单链表中位置
	cout<<"执行删除第一个元素操作，删除前数据为："<<endl;
	L.PrintList( );              //输出所有元素
	L.Delete(1);                //删除第1个元素
	cout<<"删除后数据为："<<endl;
	L.PrintList( );              //输出所有元素
	return 0;
}
