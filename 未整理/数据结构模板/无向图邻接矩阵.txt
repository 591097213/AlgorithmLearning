#include <iostream>
using namespace std;
const int MaxSize = 20;
int visited[MaxSize];
class MGraph
{
public:
	MGraph(char a[ ], int n, int e)
	{
		int i, j;
		vertexNum=n; 
		arcNum=e;
		for (i=0; i<vertexNum; i++)
			vertex[i]=a[i];
		for (i=0; i<vertexNum; i++)
		{
			for (j=0; j<vertexNum; j++)
				arc[i][j]=0;
		}
		for (int k=0; k<arcNum; k++)
		{
			cin>>i>>j;
			arc[i][j]=1; 
			arc[j][i]=1;	
		}
	}
	~MGraph( ) { }                     //析构函数为空
	void DFSTraverse(int v)           //深度优先遍历图
	{
		cout << vertex[v]<<' '; 
		visited[v] = 1;
		for (int j = 0; j < vertexNum; j++)
			if (arc[v][j] == 1 && visited[j]==0) 
				DFSTraverse(j);
	}
	void BFSTraverse(int v)          //广度优先遍历图
	{
		int Q[MaxSize];
		int front = -1, rear = -1;
		cout << vertex[v]<<' '; 
		visited[v] = 1;  
		Q[++rear] = v;               //被访问顶点入队
		while (front != rear) 
		{
			v = Q[++front];          //将队头元素出队并送到v中
			for (int j = 0; j < vertexNum; j++)
				if (arc[v][j] == 1 && visited[j] == 0 ) 
				{
					cout << vertex[j]<<' '; 
					visited[j] = 1; 
					Q[++rear] = j;
				}
		}
	}
private:
    char vertex[MaxSize];            //存放图中顶点的数组
    int arc[MaxSize][MaxSize];       //存放图中边的数组
    int vertexNum, arcNum;           //图的顶点数和边数
};
int main( )
{
	int i;
	char ch[]={'A','B','C','D','E'};
	MGraph MG(ch, 5, 6);
	for (i=0; i<MaxSize; i++)
		visited[i]=0;
	cout<<"深度优先遍历序列是：";
	MG.DFSTraverse(0);
	cout<<endl;
	for (i=0; i<MaxSize; i++)
		visited[i]=0;
    cout<<"广度优先遍历序列是：";
	MG.BFSTraverse(0);
	cout<<endl;
    return 0;
} 
