#include <iostream>
using namespace std;
const int StackSize=10;  //10只是示例性的数据，可以根据实际问题具体定义
class SeqStack
{
public:
    SeqStack( ) {top=-1;}           //构造函数，栈的初始化
	~SeqStack( ){}            //析构函数
    void Push(int x)         //将元素x入栈
	{
		if (top==StackSize-1)
		{
			cout<<"data error"<<endl;
			return;
		}
		top++;
		data[top]=x;
	}
    void Pop( )               //将栈顶元素弹出
	{ 
		int x;
		if (top==-1)
		{
			cout<<"data error"<<endl;
			return;
		}
		x=data[top--];
		cout<<x<<endl;
	}
    int GetTop( )          //取栈顶元素（并不删除）
	{
		if (top!=-1)  
			return data[top];
	}
	int Empty( )           //判断栈是否为空
	{
		if(top==-1) return 1;
		else return 0;
	} 
private:
    int data[StackSize];      //存放栈元素的数组
    int top;                //栈顶指针，指示栈顶元素在数组中的下标
};
void main( )
{    
    SeqStack S;      //创建模板类的实例
	if (S.Empty()==1)
		cout<<"栈为空"<<endl;
	else
        cout<<"栈非空"<<endl;
    cout<<"对15和10执行入栈操作"<<endl;
	S.Push(15);
	S.Push(10);   
	cout<<"栈顶元素为:"<<endl;   //取栈顶元素
	cout<<S.GetTop( )<<endl;  
	cout<<"执行一次出栈操作，出栈元素为："<<endl;
	S.Pop( );          //执行出栈操作
    cout<<"栈顶元素为:"<<endl;
    cout<<S.GetTop( )<<endl;	
}