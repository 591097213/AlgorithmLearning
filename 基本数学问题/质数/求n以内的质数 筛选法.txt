//首先，如果2是素数的话，那么2的倍数一定不是素数。
//同理，如果3是素数的话，那么3的倍数一定不是素数。
//这样，我们就可以构建一个0-n的boolean数组，先初始化为false，然后从2进行判断，然后将2的倍数全部变为true，然后在判断3，依次类推。这样的效率//约为0（n）；

//代码如下

static  boolean vis[]=new boolean[10000005];
public static void init()
{
    vis[1]=true;
    //首先全部初始化为false；
    for(int i=2;i<=10000000;i++)
        vis[i]=false;
    //从2开始判断
    for(int i=2;i<=10000000;i++)
    {
        //如果vis[i]==true,说明一定是数组之前某个元素的倍数，一定不是素数
        if(vis[i]==false)
        {
            // 为false，表明是素数，将其倍数全部为true，这里倍数从2开始
            for(int j=2;j*i<=10000000;j++)
                vis[j*i]=true;
        }
    }
}
//这个代码效率较高，对于一个新的元素，直接查表即可，非线性筛选，存在重复置true的情况


//以下为线性筛选


/*首先f[i]==0就是素数，从2开始。然后我们要去除已经取得素数的i倍的数，f[p[j]*i] = 1;
关键就是下面那句话不好理解，因为正是那句跳出循环才能保证筛选素数是线性的。
为什么i能除尽p[j]这个素数就跳出呢？
其实可以简单证明一下：
合数可以由一个质数数与另一个数相乘得到 
而同时假设合数a=质数b×质数c×一个数d
令e=c × d,假设b ≥ c,e为合数,令f=d × b 
a=f × c ,其中c
即大的质数和该合数的乘积可用一个更大的合数和比其小的质数相乘得到
这也是if(!( i % prime[j]))break;的含义,这也是线性筛法算质数表的关键所在
 
举个例子：
比如i = 9，现在素数是2 3 5 7 
进入第二重循环了，f[2 * 9] = 1;f[3 * 9] = 1;
这个时候9%3==0，要跳出了，为什么不做f[5* 9] =1；呢？
因为5 * 9 可以用3 * 15来代替，如果这个时候你计算了，那么到i=15的时候这个数还会被重复计算一次，所以这里大量避免了重复运算，所以也就节省了时间。
 
这里总结一句话就是，一个大的合数和这个能除尽的质数的乘积，一定能被一个比起小的质数和合数更大的合数乘积来代替。
不懂的时候想想 5*9 = 5*3*3 = 3*15就是这个道理。
60可能被
2*30
3*20
5*12
标记，但由2*30标记


*/

import java.util.Scanner;

//线性筛选法求n以内的质数
public class Main
{
	static boolean[] tag=new boolean[9999];//用于筛选
	static int[] zs=new int[9999];//储存质数
	static int index;//下标
	
	static void zhishu(int n)
	{
		for(int i=2;i<=n;i++)//从2~n进行判断
		{
			if(tag[i]==false)//是质数
			{
				zs[index++]=i;//存入p
			}
			for(int j=0;j<index&&i*zs[j]<=n;j++)//对p中的质数的i倍的数进行标记
			{
				tag[zs[j]*i]=true;
				if(i%zs[j]==0)//避免重复标记
					break;
			}
		}
	}
	
	
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		zhishu(n);
		for(int i=0;i<index;i++)
		{
			System.out.print(zs[i]+" ");
		}
		
		
	}
	
	
}


